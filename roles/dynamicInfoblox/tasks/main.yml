---
#Customers typically use the default view
#- name: "Create a dnsview named ansible"
#  nios_dns_view:
#    name: ansible
#    state: present
#    provider: "{{ nios_provider }}"

- name: "Create a test network subnet"
  nios_network: 
    network: "{{ ansible_subnet }}"
    comment: Test network subnet to add host records to
    state: present
    provider: "{{ nios_provider }}"

- name: "Create a forward DNS zone called {{ ansible_zone }}"
  nios_zone:
    name: "{{ ansible_zone }}"
    comment: forward DNS zone
    state: present
    provider: "{{ nios_provider }}"

- name: "Retrieve the Grid Master fqdn"
  uri:
    url: "https://{{ nios_provider.host }}/wapi/{{ wapi_version }}/ipv4address?ip_address={{ nios_provider.host }}&_return_fields=names&_return_as_object=1"
    method: GET
    user: "{{ nios_provider.username }}"
    password: "{{ nios_provider.password }}"
    #200 signifies successful creation
    status_code: 200
    headers:
      Content-Type: "application/json"
    validate_certs: no
  register: gridmasterFqdn

- name: Set the gridmaster_fqdn fact for reuse
  set_fact:
    gridmaster_fqdn: "{{ item.names[0] }}"
  with_items:
    - "{{ gridmasterFqdn.json.result }}"

- name: Use a name server group for Grid membership
  include_tasks: name_server_group.yml
  when: name_server_group is defined

- name: Manually apply Grid membership (do not leverage a name server group)
  include_tasks: establish_zone_grid_membership.yml
  when: name_server_group is undefined

#gateway_address computed by ip_addr("first_usable") lookup in defaults/main.yml
- name: Create a host record for the gateway address
  nios_host_record:
    name: "gateway{{ gateway_address | replace('.','_') }}.{{ ansible_zone }}"
    ipv4:
      - address: "{{ gateway_address }}"
    state: present
    provider: "{{ nios_provider }}"

#Generating records this way should be for demo purposes
#Normal scenario would be to iterate over a dictionary/list of hosts
- block:
    - name: "Create {{ stored_host_base }} directory"
      file:
        path: "{{ stored_host_base }}"
        state: directory

    - name: "Create the local stored_host_count at {{ stored_host_count }}"
      file:
        path: "{{ stored_host_count }}"
        state: touch

    - name: "Dynamically generate {{ host_count }} host records at next available ip in {{ ansible_subnet }}"
      include_tasks: host_record_generation.yml
      loop_control:
        loop_var: count 
      with_sequence: start=1 end={{ host_count }}
  when: host_count is defined

#This should be written to handle full directories of csvs
- name: Create records by importing a static csv file
  include_tasks: import_csv.yml
  when: static_csv is defined
...
