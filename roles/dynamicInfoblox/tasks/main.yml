---
#Customers typically use the default view
#- name: 'Create a dnsview named ansible'
#  nios_dns_view:
#    name: ansible
#    state: present
#    provider: '{{ nios_provider }}'

- name: 'Create a test network subnet'
  nios_network: 
    network: 192.168.1.0/24
    comment: test network subnet to add host records to
    state: present
    provider: '{{ nios_provider }}'

- name: 'Create a forward DNS local zone called ansible.local'
  nios_zone:
    #Hardcoded here and set as fact later
    name: ansible.local
    comment: this is a local DNS zone called ansible.local
    state: present
    provider: '{{ nios_provider }}'

- name: 'Create a reverse DNS zone called 1.168.192.in-addr.arpa'
  uri:
    url: 'https://{{ nios_provider.host }}/wapi/v2.6/zone_auth'
    method: POST
    user: '{{ nios_provider.username }}'
    password: '{{ nios_provider.password }}'
    #Extra space to avoid type detection
    body: "{{ lookup('file','reverse_zone.json') }}"
    body_format: json
    validate_certs: no
  register: reverse_dns_create
  ignore_errors: true
 
- name: 'Idempotency check for reverse zone already existing'
  fail: 
    msg: "The reverse zone creation failed"
  when: '"Reverse zone already exists" in reverse_dns_create.stderr and reverse_dns_create.stderr'

- name: 'Set a fact for the local zone for further reuse'
  set_fact:
    ansible_zone: 'ansible.local'

- name: Create a host record for the gateway address
  nios_host_record:
    name: 'gateway.ansible.local'
    ipv4:
      - address: '192.168.1.1'
    state: present
    provider: '{{ nios_provider }}'

- name: 'Dynamically generate {{ host_count }} host records at next available ip'
  include_tasks: host_record_generation.yml
  loop_control:
    loop_var: count 
  with_sequence: start=1 end={{ host_count }}
...
