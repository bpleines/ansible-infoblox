---
#Customers typically use the default view
#- name: 'Create a dnsview named ansible'
#  nios_dns_view:
#    name: ansible
#    state: present
#    provider: '{{ nios_provider }}'

- name: 'Create a test network subnet'
  nios_network: 
    network: '{{ ansible_subnet }}'
    comment: Test network subnet to add host records to
    state: present
    provider: '{{ nios_provider }}'

- name: 'Create a local forward DNS local zone called {{ ansible_zone }}'
  nios_zone:
    name: '{{ ansible_zone }}'
    comment: forward DNS zone
    state: present
    provider: '{{ nios_provider }}'

- name: 'Retrieve the Grid Master fqdn'
  uri:
    url: 'https://{{ nios_provider.host }}/wapi/{{ wapi_version }}/ipv4address?ip_address={{ nios_provider.host }}&_return_fields=names&_return_as_object=1'
    method: GET
    user: '{{ nios_provider.username }}'
    password: '{{ nios_provider.password }}'
    #200 signifies successful creation
    status_code: 200
    headers:
      Content-Type: "application/json"
    validate_certs: no
  register: gridmasterFqdn

- name: Set the gridmaster_fqdn fact for reuse
  set_fact:
    gridmaster_fqdn: '{{ item.names[0] }}'
  with_items:
    - '{{ gridmasterFqdn.json.result }}'

- name: 'Update the forward zone to reflect its new Grid primary'
  nios_zone:
    name: '{{ ansible_zone }}'
    comment: forward DNS zone
    state: present
    provider: '{{ nios_provider }}'
    grid_primary:
      - name: '{{ gridmaster_fqdn }}'

#Uri module idempotecy preferred
#- name: 'Create a reverse DNS zone'
#  include_tasks: dynamic_provider_template.yml
#  vars:
#    shell_template: 'create-authoritative-reverse-zone'

- name: 'Create an equivalent reverse DNS zone'
  uri:
    url: https://{{ nios_provider.host }}/wapi/{{ wapi_version }}/zone_auth
    method: POST
    user: '{{ nios_provider.username }}'
    password: '{{ nios_provider.password }}'
    body: "{{ reverse_zone_yml|to_json }}"
    #201 signifies successful creation
    #400 signifies existing entry
    #both should signify a successful WAPI call
    status_code: 201,400
    headers:
      Content-Type: "application/json"
    validate_certs: no
  register: reverse_dns_create
  changed_when: reverse_dns_create.status == 201
  vars:
    reverse_zone_yml:
      fqdn: "{{ ansible_subnet }}"
      zone_format: "IPV4"
      grid_primary:
        - name: '{{ gridmaster_fqdn }}'

#gateway_address computed by ip_addr("first_usable") lookup in defaults/main.yml
- name: Create a host record for the gateway address
  nios_host_record:
    name: 'gateway{{ gateway_address | replace(".","_") }}.{{ ansible_zone }}'
    ipv4:
      - address: '{{ gateway_address }}'
    state: present
    provider: '{{ nios_provider }}'

#Generating records this way should be for demo purposes
#Normal scenario would be to iterate over a dictionary/list of hosts
- name: 'Dynamically generate {{ host_count }} host records at next available ip in {{ ansible_subnet }}'
  include_tasks: host_record_generation.yml
  loop_control:
    loop_var: count 
  with_sequence: start=1 end={{ host_count }}
  when: host_count is defined

#This should be written to handle to handle full directories too
- block:
    - name: 'Get a token and url to post the import to'
      uri:
	url: 'https://{{ nios_provider.host }}/wapi/{{ wapi_version }}/fileop?_function=uploadinit'
	method: POST
	user: '{{ nios_provider.username }}'
	password: '{{ nios_provider.password }}'
	#201 signifies successful creation
	#400 signifies existing entry
	#both should signify a successful WAPI call
	#status_code: 201,400
	headers:
	  Content-Type: "application/json"
	validate_certs: no
      register: csv_token_url

    - name: 'Debug csv_token_url'
      debug:
        msg: '{{ csv_token_url }}'

    - name: 'Statically import host records from a csv file'
      include_tasks: dynamic_provider_template.yml
      vars:
        shell_template: 'static-csv-import'
        static_csv_file: '{{ role_path }}/files/staticRecords/static-test.csv'
  when: static_csv is defined    
...
